{"version":3,"sources":["components/TaskBanner.jsx","components/TaskRow.jsx","components/TaskCreator.jsx","components/VisibilityControl.jsx","App.js","index.js"],"names":["TaskBanner","props","className","taskItems","filter","t","done","length","TaskRow","task","name","type","checked","onChange","toggleTask","onClick","deleteTask","deleteSVG","enable-background","height","id","version","viewBox","width","xmlns","d","fill","x","y","points","TaskCreator","useState","newTaskName","setNewTaskName","createNewTask","callback","value","e","target","onKeyPress","charCode","VisibilityControl","isChecked","description","App","setTaskItems","showCompleted","setshowCompleted","useEffect","data","localStorage","getItem","JSON","parse","setItem","stringify","renderItems","doneValue","map","taskName","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.14fd7d6d.chunk.js","sourcesContent":["import React from 'react';\n\nexport const TaskBanner = props => {\n    return (\n        <>\n            <h4 className=\"text-center p-4\">TODO-List</h4>\n            <p className=\"text-center\">\n                {props.taskItems.filter(t => !t.done).length} tasks to do\n            </p>\n        </>\n    );\n};\n","import React from 'react';\n\nexport const TaskRow = props => (\n    <tr key={props.task.name}>\n        <td>{props.task.name}</td>\n        <td>\n            <input\n                type=\"checkbox\"\n                checked={props.task.done}\n                onChange={() => props.toggleTask(props.task)}\n            />\n        </td>\n        <td>\n            <div\n                className=\"pl-1\"\n                onClick={() => props.deleteTask(props.task.name)}\n            >\n                {deleteSVG}\n            </div>\n        </td>\n    </tr>\n);\n\nconst deleteSVG = (\n    <svg\n        enable-background=\"new 0 0 512 512\"\n        height=\"20px\"\n        id=\"Layer_1\"\n        version=\"1.1\"\n        viewBox=\"0 0 512 512\"\n        width=\"20px\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <g>\n            <path\n                d=\"M444.852,66.908h-99.339V47.04c0-21.943-17.792-39.736-39.736-39.736h-99.339   c-21.944,0-39.736,17.793-39.736,39.736v19.868H67.363v19.868h20.47l19.887,377.489c0,21.944,17.792,39.736,39.736,39.736h218.546   c21.944,0,39.736-17.792,39.736-39.736l19.538-377.489h19.577V66.908z M186.57,47.04c0-10.962,8.926-19.868,19.868-19.868h99.339   c10.962,0,19.868,8.906,19.868,19.868v19.868H186.57V47.04z M385.908,463.236l-0.039,0.505v0.524   c0,10.943-8.906,19.868-19.868,19.868H147.455c-10.942,0-19.868-8.925-19.868-19.868v-0.524l-0.019-0.523L107.72,86.776h297.669   L385.908,463.236z\"\n                fill=\"#37404D\"\n            />\n            <rect\n                fill=\"#37404D\"\n                height=\"317.885\"\n                width=\"19.868\"\n                x=\"246.173\"\n                y=\"126.511\"\n            />\n            <polygon\n                fill=\"#37404D\"\n                points=\"206.884,443.757 186.551,126.493 166.722,127.753 187.056,445.017  \"\n            />\n            <polygon\n                fill=\"#37404D\"\n                points=\"345.649,127.132 325.82,125.891 305.777,443.776 325.606,445.017  \"\n            />\n        </g>\n    </svg>\n);\n","import React, { useState } from 'react';\n\nexport const TaskCreator = props => {\n    const [newTaskName, setNewTaskName] = useState('');\n\n    const updateNewTaskValue = e => setNewTaskName(e.target.value);\n\n    const handleKeypress = e => {\n        if (e.charCode === 13) {\n            createNewTask();\n        }\n    };\n\n    const createNewTask = () => {\n        props.callback(newTaskName);\n        setNewTaskName(' ');\n    };\n\n    return (\n        <div className=\"my-1\">\n            <input\n                type=\"text\"\n                className=\"form-control\"\n                value={newTaskName}\n                onChange={updateNewTaskValue}\n                onKeyPress={handleKeypress}\n            />\n            <button className=\"btn btn-primary mt-1\" onClick={createNewTask}>\n                +\n            </button>\n        </div>\n    );\n};\n","import React from 'react';\n\nexport const VisibilityControl = props => {\n    return (\n        <div className=\"form-check\">\n            <label>\n                <input\n                    type=\"checkbox\"\n                    className=\"form-check-input\"\n                    checked={props.isChecked}\n                    onChange={e => props.callback(e.target.checked)}\n                />\n                Show {props.description}\n            </label>\n        </div>\n    );\n};\n","import React, { useState, useEffect } from 'react';\n\nimport { TaskBanner } from './components/TaskBanner';\nimport { TaskRow } from './components/TaskRow';\nimport { TaskCreator } from './components/TaskCreator';\nimport { VisibilityControl } from './components/VisibilityControl';\n\nconst App = () => {\n    const [taskItems, setTaskItems] = useState([\n        { name: 'task 1', done: false },\n    ]);\n\n    const [showCompleted, setshowCompleted] = useState(false);\n\n    useEffect(() => {\n        let data = localStorage.getItem('tasks');\n\n        localStorage.getItem('showCompletedLS') &&\n            setshowCompleted(\n                JSON.parse(localStorage.getItem('showCompletedLS'))\n            );\n\n        if (data != null) {\n            setTaskItems(JSON.parse(data));\n        } else {\n            setTaskItems([\n                { name: 'task 1 sdfgn', done: false },\n                { name: 'task 2', done: false },\n            ]);\n            setshowCompleted(false);\n        }\n    }, []);\n\n    useEffect(() => {\n        localStorage.setItem('tasks', JSON.stringify(taskItems));\n    }, [taskItems]);\n\n    useEffect(() => {\n        localStorage.setItem('showCompletedLS', JSON.stringify(showCompleted));\n    }, [showCompleted]);\n\n    const renderItems = doneValue => {\n        return taskItems\n            .filter(task => task.done === doneValue)\n            .map(task => (\n                <TaskRow\n                    task={task}\n                    key={task.name}\n                    toggleTask={toggleTask}\n                    deleteTask={deleteTask}\n                />\n            ));\n    };\n\n    const createNewTask = taskName => {\n        if (!taskItems.find(t => t.name === taskName)) {\n            setTaskItems([...taskItems, { name: taskName, done: false }]);\n        }\n    };\n\n    const toggleTask = task => {\n        return setTaskItems(\n            taskItems.map(t =>\n                t.name === task.name ? { ...t, done: !t.done } : t\n            )\n        );\n    };\n\n    const deleteTask = taskName => {\n        setTaskItems(taskItems.filter(task => task.name !== taskName));\n    };\n\n    return (\n        <div className=\"App\">\n            <TaskBanner taskItems={taskItems} />\n\n            <div className=\"container-fluid\">\n                <TaskCreator callback={createNewTask} />\n\n                <table className=\"table table-striped table-bordered\">\n                    <thead>\n                        <tr>\n                            <th>Description</th>\n                            <th>Done</th>\n                            <th>Delete</th>\n                        </tr>\n                    </thead>\n                    <tbody>{renderItems(false)}</tbody>\n                </table>\n\n                <div className=\"p-4\">\n                    <VisibilityControl\n                        description=\"Completed Tasks\"\n                        isChecked={showCompleted}\n                        callback={checked => setshowCompleted(checked)}\n                    />\n                </div>\n                {showCompleted && (\n                    <table className=\"table table-striped table-bordered\">\n                        <thead>\n                            <tr>\n                                <th>Description of completed tasks</th>\n                                <th>Done</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>{renderItems(true)}</tbody>\n                    </table>\n                )}\n            </div>\n        </div>\n    );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}